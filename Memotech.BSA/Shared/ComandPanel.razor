@inject NavigationManager navManager

<div class="row m-1">
    <div class="col-6 text-md-start">
        @foreach (var action in ActionButtons.Keys)
        {
        <button class="btn btn-outline-primary btn-sm m-1" 
            @onclick="@(e => Action.InvokeAsync(action))">@ActionButtons[action]</button>
        }
    </div>
    <div class="col-6 text-md-end">
        <button class="btn btn-outline-primary btn-sm m-1" 
            @onclick="@(e => NavTo("edit" + (Entity is null ? "" : "/" + Entity.Id)))" hidden=@hideEdit>Edit</button>
        <button type="submit" class="btn btn-outline-primary btn-sm m-1" hidden=@hideSave>Save</button>
        <button class="btn btn-outline-primary btn-sm m-1" 
            @onclick="@(e => NavTo(""))" hidden=@hideClose>Close</button>
        <button class="btn btn-outline-primary btn-sm m-1" 
            @onclick="@(e => NavTo(""))" hidden=@hideCancel>Cancel</button>
    </div>
</div>

@code {
    [Parameter] public DetModes Mode { get; set; }
    [Parameter] public BaseEntity? Entity { get; set; }
    [Parameter] public Dictionary<string, string> ActionButtons { get; set; } = new();
    [Parameter] public EventCallback<string> Action { get; set; }

    bool hideEdit = true;
    bool hideSave = true;
    bool hideClose = true;
    bool hideCancel = true;

    void NavTo(string action)
    {
        navManager.NavigateTo($"/memos/{action}");
    }

    protected override void OnParametersSet()
    {
        hideEdit = Entity is null || Entity.Id < 1 || Mode != DetModes.View;
        hideSave = Mode != DetModes.AddNew && Mode != DetModes.Edit;
        hideClose = Mode != DetModes.View;
        hideCancel = Mode != DetModes.AddNew && Mode != DetModes.Edit;
    }
}
