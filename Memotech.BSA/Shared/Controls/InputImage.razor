@using System.IO
@using Tewr.Blazor.FileReader
@inject IFileReaderService reader

<div class="col-12">
    <label class="form-label" for="inputGroupFileField">@Label</label>
    <input type="file" class="form-control" id="inputGroupFileField" aria-describedby="inputGroupFile" 
        placeholder="Please select image" aria-label="Please select"
        @ref="inputElement" @onchange="OnImageSelectedHandlerAsync" accept=".jpg,.jpeg,.png" />
</div>

<div>
    @if (imageBase64 != null)
    {
        <div>
            <div class="my-3 mr-3">
                <img src="data:image/jpeg;base64,@imageBase64" class="img-thumbnail" width="200"/>
            </div>
        </div>
    }

    @if (ImageUrl != null)
    {
        <div>
            <div class="my-3 mr-3">
                <img src="@ImageUrl" class="img-thumbnail" width="200"/>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "Image";
    [Parameter] public string? ImageUrl { get; set; }
    [Parameter] public EventCallback<string> OnImageFileSelected { get; set; }

    ElementReference inputElement;
    string? imageBase64;

    async Task OnImageSelectedHandlerAsync()
    {
        foreach (var item in await reader.CreateReference(inputElement).EnumerateFilesAsync())
        {
            using MemoryStream ms = await item.CreateMemoryStreamAsync(4 * 1024);
            IFileInfo fileInfo = await item.ReadFileInfoAsync();
            var byteImage = new byte[ms.Length];
            ms.Read(byteImage, 0, (int)ms.Length);
            imageBase64 = Convert.ToBase64String(byteImage);
            await OnImageFileSelected.InvokeAsync(imageBase64);

            ImageUrl = null;
            StateHasChanged();
        }
    }
}
