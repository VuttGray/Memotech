@page "/memos"
@inject IMemoService memoService
@inject IMemoSetService memoSetService

<VccFilterPanel AllowToAdd="true" CreationPage="CreationPage">
    <Filters>
        <div class="col-2 text-start">
            <div class="form-check">
                <input @onchange="ShowAllChanged" class="form-check-input" type="checkbox" value="@ShowAll" id="ShowAllCheckbox">
                <label class="form-check-label" for="ShowAllCheckbox">Show all</label>
            </div>
        </div>
        <div class="col-8">
            <div class="row">
                <label for="MemoSetDdl" class="col-sm-2 col-form-label">Memo set</label>
                <div class="col-sm-10">
                    <select @onchange="MemoSetChanged" class="form-select" aria-label="Memo set" id="MemoSetDdl">
                      <option value="0" selected>All</option>
                      @foreach (var memoSet in memoSets)
                      {
                          <option value="@memoSet.Id">@memoSet.Name</option>
                      }
                    </select>
                </div>
            </div>
        </div>
    </Filters>
</VccFilterPanel>

<VccGrid Records=@filteredMemos>
    <ItemHeader>
        <MemoInfo Mode="DetModes.GridHeader"/>
    </ItemHeader>
    <ItemRow Context="memo">
        <MemoInfo Entity="memo" Mode="DetModes.GridView"/>
    </ItemRow>
</VccGrid>

@code {
    List<Memo> memos = new();
    List<MemoSet> memoSets = new();
    List<Memo> filteredMemos = new();
    public bool ShowAll { get; set; }
    public int MemoSetId { get; set; }

    void ShowAllChanged(ChangeEventArgs args)
    {
        ShowAll = (bool)(args?.Value ?? false);

        Console.WriteLine($"Show all: {ShowAll}");
        GetFilteredRecords(ShowAll, MemoSetId);
    }

    void MemoSetChanged(ChangeEventArgs args)
    {
        var value = args?.Value?.ToString() ?? "";
        if (int.TryParse(value, out var id))
        {
            MemoSetId = id;

            Console.WriteLine($"Show all: {ShowAll}");
            GetFilteredRecords(ShowAll, MemoSetId);
        }
    }

    protected override void OnInitialized()
    {
        memos = memoService?.GetAll().ToList() ?? new List<Memo>();
        memoSets = memoSetService?.GetAll().ToList() ?? new List<MemoSet>();
        GetFilteredRecords();
    }

    void GetFilteredRecords(bool showAll = false, int memoSetId = 0)
    {
        filteredMemos = memos
            .Where(r => (!r.IsStudied || showAll) 
                         && (r.MemoSetsList.Contains(memoSetId) || memoSetId == 0))
            .ToList();
    }
}
