@using Memotech.BSA.Data.Helpers
<EditForm Model="Memo" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-12">
            <label for="txtMemoTerm" class="form-label">Term</label>
            <input type="text" id="txtMemoTerm" class="form-control" @bind-value="Memo.Term"/>
            <ValidationMessage For="() => Memo.Term" />
        </div>
        <div class="col-12">
            <label for="txtMemoMeaning" class="form-label">Meaning</label>
            <input type="text" id="txtMemoMeaning" class="form-control" @bind-value="Memo.Meaning"/>
            <ValidationMessage For="() => Memo.Meaning" />
        </div>
        <div class="col-12">
            <label for="ddlMemoType" class="form-label">Meaning</label>
            <select id="ddlMemoType" class="form-control" @bind="Memo.TypeId">
                <option value="-1">Select type ...</option>
                @foreach (MemoTypes type in Enum.GetValues(typeof(MemoTypes)))
                {
                    <option value="@GetTypeId(type)">@type</option>
                }
            </select>
            <ValidationMessage For="() => Memo.TypeId" />
        </div>
        <InputImage Label="Memo image" OnImageFileSelected="InputFileSelectorHandler" ImageUrl="@imageUrl"/>
        <div class="col-12">
            <MarkdownInput @bind-Value="Memo.Info" Label="Info" OnFor="() => Memo.Info" />
        </div>
        <ComandPanel Mode="Mode" Entity="Memo" Save="SaveAsync"/>
    </div>
</EditForm>

@code {
    [Parameter] public Memo Memo { get; set; } = new();
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    DetModes Mode;
    string? imageUrl;

    protected override void OnInitialized()
    {
        imageUrl = Memo.Image;
        Memo.Image = null;
        Mode = Memo.Id > 0 ? DetModes.Edit : DetModes.AddNew;
    }

    void InputFileSelectorHandler(string imageBase64)
    {
        Memo.Image = imageBase64;
        imageUrl = null;
    }

    int GetTypeId(MemoTypes type)
    {
        return (int)type;
    }

    async Task SaveAsync(BaseEntity entity)
    {
        Console.WriteLine("Edit form: SubmitAsync");
        if (entity is null)
        {
            Console.WriteLine("Edit form: entity is null");
        }
        else
        {
            Memo = (Memo)entity;
            await OnValidSubmit.InvokeAsync();
        }
    }
}
