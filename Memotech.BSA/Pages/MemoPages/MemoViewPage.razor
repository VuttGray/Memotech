@page "/memos/{Id:int}"
@using System.Reflection
@inject IMemoService memoService
@inject IMemoSetService memoSetService

@if (memo != null)
{
    <EntityInfoPanel Entity="memo"/>
    <MemoInfo Mode="DetModes.View" Entity="memo" MemoSets="@memoSets"/>
}
else
{
    <div class="row">
        <h1>Unknown</h1>
        <p>The specified memo is not found</p>
    </div>
}
<ComandPanel Mode="DetModes.View" Entity="memo" ActionButtons="actionButtons" Action="ActionButtonOnClick" />


@code {
    [Parameter] public int Id { get; set; }

    Memo? memo;
    string memoSets = "";
    List<ActionButton> actionButtons = new();

    protected override void OnInitialized()
    {
        memo = memoService.GetById(Id);
        if (memo != null && memo.MemoSetsList.Any())
        {
            memoSets = string.Join(", ", memoSetService.GetByIds(memo.MemoSetsList).Select(ms => ms.Name));
        }

        actionButtons = new List<ActionButton>
        {
            new ActionButton { Action = PrevMemo, Title = "Prev" },
            new ActionButton { ActionName = "ResetStatistics", Title = "Reset stat", VisibilityFunc = (() => memo != null && (memo.StudyPercentage > 0 || memo.StudyStages.Any() || memo.IsStudied)) },
            new ActionButton { ActionName = "MarkAsStudied", Title = "Known", VisibilityFunc = (() => memo != null && !memo.IsStudied) },
            new ActionButton { Action = NextMemo, Title = "Next" },
        };
    }

    void ActionButtonOnClick(ActionButton actionButton)
    {
        if (!string.IsNullOrEmpty(actionButton.ActionName))
            memoService.GetType().GetMethod(actionButton.ActionName)?.Invoke(memoService, new[] { memo });
        else if (actionButton.Action != null)
            actionButton.Action();
    }

    public void PrevMemo()
    {
        if(memo != null) 
        memo = memoService.GetPrev(memo);
    }

    public void NextMemo()
    {
        if(memo != null) 
        memo = memoService.GetNext(memo);
    }
}
