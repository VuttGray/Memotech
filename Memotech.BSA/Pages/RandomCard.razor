@page "/RandomCard"
@using System.Timers;
@using Memotech.BSA.Helpers
@implements IDisposable;

<div class="row text-center">
    <div class="col">
        <h1 class="text-success">Random card</h1>
    </div>
</div>

@if (!string.IsNullOrEmpty(gameResultMessage))
{
    <div class="row text-center">
        <div class="col text-center alert alert-@resultStyle">
            <h3>@gameResultMessage</h3>
        </div>
    </div>
}

<div class="row text-center">
    <div class="col mb-5 justify-justify-content-center">
        <img src="@opponent?.Image" class="general-image"/>
    </div>
</div>

<div class="row text-center">
    <div class="col mb-5 justify-justify-content-center">
        <button class="btn btn-primary" @onclick="ResetGame">Start</button>
    </div>
</div>

<div class="row text-center justify-content-around">
@*    <div class="col">
        <img src="./images/paper.png" class="general-image hovered-image"/>
    </div>
    <div class="col">
        <img src="./images/scissors.png" class="general-image hovered-image"/>
    </div>
    <div class="col">
        <img src="./images/rock.png" class="general-image hovered-image"/>
    </div>*@
    @foreach (var item in games)
    {
        <img src="@item.Image" class="general-image hovered-image" @onclick="(e => SelectedHandler(item))"/>
    }
</div>

@code {
    List<GameHandler> games = new List<GameHandler>()
    {
        new GameHandler {Choose = RspOptions.Paper, LooseCondition = RspOptions.Scissor, WinCondition = RspOptions.Rock, Image="./images/paper.png"},
        new GameHandler {Choose = RspOptions.Rock, LooseCondition = RspOptions.Paper, WinCondition = RspOptions.Scissor, Image="./images/rock.png"},
        new GameHandler {Choose = RspOptions.Scissor, LooseCondition = RspOptions.Rock, WinCondition = RspOptions.Paper, Image="./images/scissors.png"},
    };

    Timer? timer;
    GameHandler? opponent;
    Random? rnd;
    int imageIndex = 0;
    string gameResultMessage = "";
    string resultStyle = "";

    protected override void OnInitialized()
    {
        opponent = games[0];
        rnd = new Random(DateTime.Now.Millisecond);

        timer = new Timer();
        timer.Interval = 100;
        timer.Elapsed += ElapsedTimer;
        timer.Start();
    }

    async void ElapsedTimer(object? sender, ElapsedEventArgs args)
    {
        imageIndex = rnd.Next(0, games.Count);
        opponent = games[imageIndex];
        await InvokeAsync(StateHasChanged);
    }

    void SelectedHandler(GameHandler game)
    {
        timer.Stop();
        RspGameStates gameResult = game.GameResult(opponent);

        switch(gameResult)
        {
            case RspGameStates.Victory:
                gameResultMessage = "You are WON";
                resultStyle = "success";
                break;
            case RspGameStates.Loss:
                gameResultMessage = "You are LOST!";
                resultStyle = "danger";
                break;
            case RspGameStates.Draw:
                gameResultMessage = "Draw!";
                resultStyle = "primary";
                break;
        };
    }

    void ResetGame()
    {
        timer.Start();
        gameResultMessage = "";
        resultStyle = "";
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
    }
}
